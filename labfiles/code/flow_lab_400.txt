metadata:
  platformVersion: "1.0"
main: true
name: "FinancialBotMainFlow"
context:
  variables:
    accountType: "AccountType"
    toAccount: "ToAccount"
    spendingCategory: "TrackSpendingCategory"
    paymentAmount: "CURRENCY"
    location : "string"
    invest : "string"
    iResult: "nlpresult"
states:
  intent:
    component: "System.Intent"
    properties:
      variable: "iResult"
      confidenceThreshold: 0.4
    transitions:
      actions:
        Balances: "startBalances"
        Send Money: "startPayments"
        Track Spending: "startTrackSpending"
        InvestPlan: "startPlan"
        NearBy: "SendLocation"
        unresolvedIntent: "unresolved"
        
  startPlan:
    component: "InvestPlan"
    transitions: #{}
      return: "startPlan"

  SendLocation:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      metadata:
        responseItems:
        - type: "text"
          text: "아래 버튼을 눌러서 위치를 공유해 주세요."
          separateBubbles: true
          name: "SendLocation"
        globalActions:
        - label: "위치 공유"
          type: "location"
          name: "Send Location"
      variable: "location"
    transitions:
      actions:
        locationSent: "ShowLocation"
  
  ShowLocation:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      metadata:
        responseItems:
        - type: "attachment" 
          attachmentType: "image" 
          attachmentUrl: "https://simg.pstatic.net/static.map/image?version=1.1&center=127.0406213,37.4990903&level=11&w=700&h=323&baselayer=default&markers=type,default2,127.0406213,37.4990903"          
        - type: "text"
          text: "가장 가까운 점은 역삼점입니다."
          separateBubbles: true
          name: "LocInfo"          
        globalActions:
        - label: "초기 메뉴로"
          type: "postback"
          payload:
            action: "menu"
          name: "feature Menu"
    transitions:
      actions:
        menu: "FeatureMenu"

  FeatureMenu:
    component: "System.CommonResponse"
    properties:
      metadata:
        responseItems:
        - type: "text"
          text: "안녕하세요, ${profile.firstName}님! 제가 무엇을 도와드릴까요?"
          name: "방문자"
          separateBubbles: true
          actions:
          - label: "잔고조회"
            type: "postback"
            payload:
              action: "startBalances"
            name: "balances"
          - label: "송금하기"
            type: "postback"
            payload:
              action: "startPayments"
            name: "payments"
          - label: "지출 내역 확인하기"
            type: "postback"
            payload:
              action: "startTrackSpending"
            name: "trackSpending"
          - label: "가까운 영업점 찾기"
            type: "postback"
            payload:
              action: "SendLocation"
            name: "sendlocation"            
      processUserMessage: true
    transitions:
      actions:
        startBalances: "startBalances"
        startPayments: "startPayments"      
        startTrackSpending: "startTrackSpending"
        SendLocation: "SendLocation"
        textReceived: "intent"
        
  startBalances:
    component: "System.SetVariable"
    properties:
      variable: "accountType"
      value: "${iResult.value.entityMatches['AccountType'][0]}"
    transitions: {}
  askBalancesAccountType:
    component: "System.List"
    properties:
      options: "${accountType.type.enumValues}"
      prompt: "어떤 계좌의 잔고를 보고 싶으신가요?"
      variable: "accountType"
      maxPrompts: 2
    transitions:
      actions:
        cancel: "intent"    
  printBalance:
    component: "BalanceRetrieval"
    properties:
      accountType: "${accountType.value}"
    transitions:
      return: "printBalance"
      
  startPayments:
    component: "System.SetVariable"
    properties:
      variable: "accountType"
      value: "${iResult.value.entityMatches['AccountType'][0]}"
    transitions: {}
  resolveToAccount:
    component: "System.SetVariable"
    properties:
      variable: "toAccount"
      value: "${iResult.value.entityMatches['ToAccount'][0]}"
    transitions: {}
  resolvePaymentAmount:
    component: "System.SetVariable"
    properties:
      variable: "paymentAmount"
      value: "${iResult.value.entityMatches['CURRENCY'][0]}"
    transitions: {}
  askFromAccountType:
    component: "System.List"
    properties:
      options: "${accountType.type.enumValues}"
      prompt: "어떤 계좌로 부터 출금할까요?"
      variable: "accountType"
      maxPrompts: 2      
    transitions:
      actions:
        cancel: "intent"       
    
  askToAccount:
    component: "System.List"
    properties:
      options: "${toAccount.type.enumValues}"
      prompt: "어떤 계좌로 송금 할까요?"
      variable: "toAccount"
      maxPrompts: 2            
    transitions: 
      actions:
        cancel: "intent"       
  askPaymentAmount:
    component: "System.Text"
    properties:
      prompt: "얼마를 송금 할까요?"
      variable: "paymentAmount"
      maxPrompts: 2            
    transitions: 
      actions:
        cancel: "intent"   
  doPayment:
    component: "Payments"
    properties:
      fromAccountType: "${accountType.value}"
      toAccount: "${toAccount.value}"
      amount: "${paymentAmount.value.totalCurrency}"
    transitions:
      return: "doPayment"
      
  startTrackSpending:
    component: "System.SetVariable"
    properties:
      variable: "spendingCategory"
      value: "${iResult.value.entityMatches['TrackSpendingCategory'][0]}"
    transitions: {}
  askCategory:
    component: "System.List"
    properties:
      options: "${spendingCategory.type.enumValues}"
      prompt: "어떤 항목의 지출내역이 궁금하신가요?"
      variable: "spendingCategory"
      maxPrompts: 2            
    transitions: 
      actions:
        cancel: "intent"    
  showSpending:
    component: "TrackSpending"
    properties:
      spendingCategory: "${spendingCategory.value}"
      date: "${iResult.value.entityMatches['DATE'][0]}"
      durationStart: "${iResult.value.entityMatches['DURATION'][0].startDate}"
      durationEnd: "${iResult.value.entityMatches['DURATION'][0].endDate}"
    transitions:
      return: "showSpending"      
      
  unresolved:
    component: "System.Output"
    properties:
      text: "무슨 말씀인지 모르겠습니다. 다시 말씀해주세요"
    transitions: 
      return: "unresolved"